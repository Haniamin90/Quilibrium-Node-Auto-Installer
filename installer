#!/bin/bash

# Step 1: Update package lists
echo "Updating package lists..."
apt-get update || { echo "Failed to update package lists! Exiting..."; exit 1; }

# Step 2: Install required packages
echo "Installing required packages..."
apt-get install -y curl wget git tmux nano unzip || { echo "Failed to install required packages! Exiting..."; exit 1; }

# Step 3: Install Rust
echo "Installing Rust..."
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y || { echo "Failed to install Rust! Exiting..."; exit 1; }
echo 'source $HOME/.cargo/env' >> $HOME/.profile
source $HOME/.profile

# Step 4: Download and install Go
echo "Installing Go..."
wget https://go.dev/dl/go1.20.11.linux-amd64.tar.gz || { echo "Failed to download Go! Exiting..."; exit 1; }
tar -C /usr/local -xzf go1.20.11.linux-amd64.tar.gz || { echo "Failed to extract Go! Exiting..."; exit 1; }
echo 'export PATH=$PATH:/usr/local/go/bin' >> $HOME/.profile
source $HOME/.profile

# Step 4.1: Configure UFW (Uncomplicated Firewall)
echo "Configuring UFW..."
echo "y" | sudo ufw enable || { echo "Failed to enable UFW! Exiting..."; exit 1; }
sudo ufw allow 22 || { echo "Failed to allow SSH port 22! Exiting..."; exit 1; }
sudo ufw allow 8336 || { echo "Failed to allow port 8336! Exiting..."; exit 1; }
sudo ufw allow 443 || { echo "Failed to allow HTTPS port 443! Exiting..."; exit 1; }
sudo ufw status || { echo "Failed to get UFW status! Exiting..."; exit 1; }

# Step 5: Clone ceremonyclient repository
echo "Cloning ceremonyclient repository..."
git clone https://github.com/Noretreat/ceremonyclient /ceremonyclient || { echo "Failed to clone repository! Exiting..."; exit 1; }
cd /ceremonyclient/node/.config || { echo "Failed to change directory! Exiting..."; exit 1; }

# Step 6: Download the file
echo "Downloading the file..."
curl --header "Host: drive.usercontent.google.com" --header "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36" --header "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7" --header "Accept-Language: en-US,en;q=0.9" --header "Cookie: SEARCH_SAMESITE=CgQIgZsB; OGPC=19010599-1:; SID=g.a000jAhdixE9TbNkLbYIHpejnCFOFsGoPuvscrngVVq-h9sBLwVsRIRx2AbLvCjaw126IeB3rAACgYKARMSAQASFQHGX2Mie5uNm7ausBEYwJXAEnmVjhoVAUF8yKpZnNgbdGFsddTJKCNoTdRw0076; __Secure-1PSID=g.a000jAhdixE9TbNkLbYIHpejnCFOFsGoPuvscrngVVq-h9sBLwVsc_Lp2KFxTN8Pv4pHJsFYYwACgYKAagSAQASFQHGX2MiGhnI0lNDha3-mMJA_eLaKxoVAUF8yKriMy0qecYyWQ0lwM3yUkrC0076; __Secure-3PSID=g.a000jAhdixE9TbNkLbYIHpejnCFOFsGoPuvscrngVVq-h9sBLwVsoFdWb1bL08HwQuy9OPuY8wACgYKAbMSAQASFQHGX2MisPCdHUgdj4NXKkSTCajNIhoVAUF8yKovYojJPlEMhg57iMlcRp1-0076; HSID=AbGofwUORyIZSBSpS; SSID=AgM66Qvhuhknbwr37; APISID=epwS-zWPY_e9bUmg/AETt-kteBUjJXDc2e; SAPISID=zGZPr1GFS2MosGCv/Ao4icauVZ1XGa5KIX; __Secure-1PAPISID=zGZPr1GFS2MosGCv/Ao4icauVZ1XGa5KIX; __Secure-3PAPISID=zGZPr1GFS2MosGCv/Ao4icauVZ1XGa5KIX; AEC=AQTF6Hz64zx0cxWhjieMeCR_AsDx1VDQiF3VTNe1Ntu704UFnDRzyQMYHiM; NID=514=Q4duBBoCFAM4l6e2E2AjnzNUCY_c-zTlDId42IsRxnOGDNRN5fA3UziA-8ZZd_srHAAB8N8hulldNipqqnC0C_Zg-p6p1PmStwiNYkkNcM_7DA5kjYL6DPyKFSGx8Zpo_YgSVx1Rly7Kv9t9KbsW-XlmoaP5KDvf5bUwje4c3odKDZCX-l7qnLvwW-onfCy8oMBD3DxyFDX_9DucJQkNK6NQnqcOOzMf5_rW9YPntcUPLARB4uYC-fN8XqblWI8hX0QXr6zA6CzW9pHFQEeQ0zn6YZFKhVNnSSBWlMONjFudJAKHLh5aKa2jzVESptVPf3tbm_MNYZiE_LdvVtW27AvZpwDlLzPVadJIxjkq-Qxb6u0Y2o6YjNtxvaPnce-MQA-0VL2dWJeeXlRevlqA7dEgXWrPa3bm5EM20Ptloygejr6y8mdu; 1P_JAR=2024-05-21-21; __Secure-1PSIDTS=sidts-CjIBLwcBXARgYAMbTAvbuniDCvPeXbp7x1S95i15qZKkZmRuf7zQUllPzTgNvHrDAGh-jxAA; __Secure-3PSIDTS=sidts-CjIBLwcBXARgYAMbTAvbuniDCvPeXbp7x1S95i15qZKkZmRuf7zQUllPzTgNvHrDAGh-jxAA; SIDCC=AKEyXzWfAA2oBWaPmXef57bT-o2W8lRjst_8T2I9OFte6PFaFMKPL4y8S8rTAN8h4pIGCjoEMQ; __Secure-1PSIDCC=AKEyXzXptfg1S7Wmww3Xjxi4rSrjj62-T2D2alBdaPG-rwtwGDMLJeM-QEzidmh6SCu6HQchsg; __Secure-3PSIDCC=AKEyXzUGMYePs_q7ECqN6TBbs0AWbCkK7Tfgno2ezFcvFvoboChnluEOBsRymfLLgJmscT4gh-I" --header "Connection: keep-alive" "https://drive.usercontent.google.com/download?id=1VJPKGl_PuW438ek_kQZP0_ZRNBwSVRuT&export=download&authuser=3&confirm=t&uuid=edd18e0a-a4f5-49a5-9a7b-bddaa13195c2&at=APZUnTWOIa1Vd_Bxz4lPExB-b_5L:1716329878657" -L -o "store.zip"

# Step 7: Create 20-quilibrium.conf
echo "Creating 20-quilibrium.conf..."
cat <<EOL > /etc/sysctl.d/20-quilibrium.conf
# Quilibrium buffering requirements, especially during sync.
# The value could be as low as 26214400, but everything would be slower.

net.core.rmem_max = 600000000
net.core.wmem_max = 600000000
EOL
if [[ $? -ne 0 ]]; then
  echo "Failed to create 20-quilibrium.conf! Exiting..."
  exit 1
fi

# Step 8: Start tmux session
echo "Starting tmux session..."
tmux new-session -d -s node || { echo "Failed to start tmux session! Exiting..."; exit 1; }

# Step 9: Run restart_node.sh in tmux session
echo "Running restart_node.sh in tmux session..."
tmux send-keys -t node 'cd /ceremonyclient/node/ && ./restart_node.sh' C-m || { echo "Failed to run restart_node.sh in tmux session! Exiting..."; exit 1; }

# Step 10: Suspend restart_node.sh after 80 seconds
echo "Suspending restart_node.sh after 80 seconds..."
sleep 80
tmux send-keys -t node C-z || { echo "Failed to suspend restart_node.sh in tmux session! Exiting..."; exit 1; }

# Step 11: Unzip the file outside tmux session
echo "Unzipping the file..."
unzip /ceremonyclient/node/.config/store.zip -d /ceremonyclient/node/.config || { echo "Failed to unzip file! Exiting..."; exit 1; }

# Step 12: Restart restart_node.sh
echo "Restarting restart_node.sh..."
tmux send-keys -t node 'cd /ceremonyclient/node/ && ./restart_node.sh' C-m || { echo "Failed to restart restart_node.sh in tmux session! Exiting..."; exit 1; }

echo "Setup complete."
